// SPDX-License-Identifier: MIT
pragma solidity >=0.4.22 <0.9.0;

import "@openzeppelin/contracts/ownership/Ownable.sol";
import "./GSN/Context.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721Metadata.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721Burnable.sol";
import "@openzeppelin/contracts/math/SafeMath.sol";

contract OurSongNFToken is Context, Ownable, ERC721Metadata, ERC721Burnable {
  using SafeMath for uint256;

  string private _baseURI;
  string private _contractURI;

  constructor(string memory name_, string memory symbol_, string memory baseURI_) ERC721Metadata(name_, symbol_) public {
    _setBaseURI(baseURI_);
    setContractURI(baseURI_);
  }

  function contractURI() public view returns (string memory) {
    return _contractURI;
  }

  function setBaseURI(string memory baseURI_) public onlyOwner {
    _setBaseURI(baseURI_);
  }

  /**
  * @dev Internal function to set the base URI for all token IDs. It is
  * automatically added as a prefix to the value returned in {tokenURI}.
  *
  * _Available since v2.5.0._
  */
  function _setBaseURI(string memory baseURI) internal {
    _baseURI = baseURI;
  }

  /**
  * @dev Returns the base URI set via {_setBaseURI}. This will be
  * automatically added as a preffix in {tokenURI} to each token's URI, when
  * they are non-empty.
  *
  * _Available since v2.5.0._
  */
  function baseURI() external view returns (string memory) {
    return _baseURI;
  }

  function setContractURI(string memory contractURI_) public onlyOwner {
    _contractURI = contractURI_;
  }

  /**
    * @dev Creates a new token for `to`. Its token ID will be automatically
    * assigned (and available on the emitted {IERC721-Transfer} event), and the token
    * URI autogenerated based on the base URI passed at construction.
    *
    * See {ERC721-_mint}.
    *
    * Requirements:
    *
    * - the caller must have the `MINTER_ROLE`.
    */
  function mint(address to_, uint256 tokenId_) public onlyOwner {
    _mint(to_, tokenId_);
  }
}
