{
	"compiler": {
		"version": "0.5.4+commit.9549d8ff"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"constant": true,
				"inputs": [
					{
						"name": "account",
						"type": "address"
					},
					{
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"name": "uri",
				"outputs": [
					{
						"name": "",
						"type": "string"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "from",
						"type": "address"
					},
					{
						"name": "to",
						"type": "address"
					},
					{
						"name": "ids",
						"type": "uint256[]"
					},
					{
						"name": "values",
						"type": "uint256[]"
					},
					{
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "safeBatchTransferFrom",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "accounts",
						"type": "address[]"
					},
					{
						"name": "ids",
						"type": "uint256[]"
					}
				],
				"name": "balanceOfBatch",
				"outputs": [
					{
						"name": "",
						"type": "uint256[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "operator",
						"type": "address"
					},
					{
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "account",
						"type": "address"
					},
					{
						"name": "operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "from",
						"type": "address"
					},
					{
						"name": "to",
						"type": "address"
					},
					{
						"name": "id",
						"type": "uint256"
					},
					{
						"name": "value",
						"type": "uint256"
					},
					{
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "TransferSingle",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "ids",
						"type": "uint256[]"
					},
					{
						"indexed": false,
						"name": "values",
						"type": "uint256[]"
					}
				],
				"name": "TransferBatch",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "value",
						"type": "string"
					},
					{
						"indexed": true,
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "URI",
				"type": "event"
			}
		],
		"devdoc": {
			"details": "Implementation of the basic standard multi-token. See https://eips.ethereum.org/EIPS/eip-1155 Originally based on code by Enjin: https://github.com/enjin/erc-1155",
			"methods": {
				"balanceOf(address,uint256)": {
					"details": "Get the specified address' balance for token with specified ID. Attempting to query the zero account for a balance will result in a revert.",
					"params": {
						"account": "The address of the token holder",
						"id": "ID of the token"
					},
					"return": "The account's balance of the token type requested"
				},
				"balanceOfBatch(address[],uint256[])": {
					"details": "Get the balance of multiple account/token pairs. If any of the query accounts is the zero account, this query will revert.",
					"params": {
						"accounts": "The addresses of the token holders",
						"ids": "IDs of the tokens"
					},
					"return": "Balances for each account and token id pair"
				},
				"isApprovedForAll(address,address)": {
					"params": {
						"account": "The account of the Tokens",
						"operator": "Address of authorized operator"
					},
					"return": "True if the operator is approved, false if not"
				},
				"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
					"details": "Transfers `values` amount(s) of `ids` from the `from` address to the `to` address specified. Caller must be approved to manage the tokens being transferred out of the `from` account. If `to` is a smart contract, will call `onERC1155BatchReceived` on `to` and act appropriately.",
					"params": {
						"data": "Data forwarded to `onERC1155Received` if `to` is a contract receiver",
						"from": "Source address",
						"ids": "IDs of each token type",
						"to": "Target address",
						"values": "Transfer amounts per token type"
					}
				},
				"safeTransferFrom(address,address,uint256,uint256,bytes)": {
					"details": "Transfers `value` amount of an `id` from the `from` address to the `to` address specified. Caller must be approved to manage the tokens being transferred out of the `from` account. If `to` is a smart contract, will call `onERC1155Received` on `to` and act appropriately.",
					"params": {
						"data": "Data forwarded to `onERC1155Received` if `to` is a contract receiver",
						"from": "Source address",
						"id": "ID of the token type",
						"to": "Target address",
						"value": "Transfer amount"
					}
				},
				"setApprovalForAll(address,bool)": {
					"details": "Sets or unsets the approval of a given operator.     * An operator is allowed to transfer all tokens of the sender on their behalf.     * Because an account already has operator privileges for itself, this function will revert if the account attempts to set the approval status for itself.",
					"params": {
						"approved": "representing the status of the approval to be set",
						"operator": "address to set the approval"
					}
				},
				"supportsInterface(bytes4)": {
					"details": "See `IERC165.supportsInterface`.     * Time complexity O(1), guaranteed to always use less than 30 000 gas."
				},
				"uri(uint256)": {
					"details": "See {IERC1155MetadataURI-uri}.     * This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].     * Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
				}
			},
			"title": "Standard ERC1155 token"
		},
		"userdoc": {
			"methods": {
				"isApprovedForAll(address,address)": {
					"notice": "Queries the approval status of an operator for a given account."
				}
			}
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/ERC1155/ERC1155.sol": "ERC1155"
		},
		"evmVersion": "byzantium",
		"libraries": {},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/introspection/ERC165.sol": {
			"keccak256": "0xac2eacd7e7762e275442f28f21d821544df5aae2ed7698af13be8c41b7005e2e",
			"urls": [
				"bzzr://43e901f6f210568ebc1d3591da3ce6a9d10796b854767a9c6e3da10305a8a332"
			]
		},
		"@openzeppelin/contracts/introspection/IERC165.sol": {
			"keccak256": "0x661553e43d7c4fbb2de504e5999fd5c104d367488350ed5bf023031bd1ba5ac5",
			"urls": [
				"bzzr://fc2ba15143ce3a00268ecd15fc98eb2469b18bfe27a64bbab0ac6446f161c739"
			]
		},
		"@openzeppelin/contracts/math/SafeMath.sol": {
			"keccak256": "0xd1804d04fb39689453f673601429a99a0c68c422a981fc338773df9a59180fe9",
			"urls": [
				"bzzr://a7dfb6fc259d0074da840a848461487567e2a6309105dd5c050a4e025f0fa7cb"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0xf3358e5819ca73357abd6c90bdfffd0474af54364897f6b3e3234c4b71fbe9a1",
			"urls": [
				"bzzr://f7f6da60a184233fd666ac44e6fb2bd51ca6ebdc4867a310d368049aa4e62786"
			]
		},
		"contracts/ERC1155/ERC1155.sol": {
			"keccak256": "0x5832f8c9c5cf38b206e7baf0a0bd4a94a97a246aead9fb5025fd70ac709dca97",
			"urls": [
				"bzzr://26f0a40c919d0dc7fca256da7e0357672517a3475b9b3f85e28796929a547936"
			]
		},
		"contracts/ERC1155/IERC1155.sol": {
			"keccak256": "0x62f7a4c6b32f3e6f980bc174b6615c8a2d088518b820914efb26bbd2f14f7608",
			"urls": [
				"bzzr://656f1e751d06f0be51f1297d6be1b53d9cd598a8e781159fc4340d9ce025fa82"
			]
		},
		"contracts/ERC1155/IERC1155Receiver.sol": {
			"keccak256": "0xf43bcc1f751c5abb0959c7981af57fcbeaabcf84668be9b1b96bc04972c2a3c0",
			"urls": [
				"bzzr://f766d4ac22d73150933e4f4c3cd17f4b1c418cd7482c0316486d0638e696f34a"
			]
		}
	},
	"version": 1
}